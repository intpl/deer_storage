#+TITLE: TODO

* TODO [63%] [43/68] DEADLINE: <2020-03-31 Tue>
** DONE Clean up everything related to Animals, create new git repo if necessary
** DONE Solve tech debt, upgrade all packages to new versions, fork/clone if necessary
** DONE Fix SSL issue
** DONE Pow.Plug.clear_authenticated_user/1 is deprecated. Use `delete/1` instead
** DONE Sorting by columns in Admin#index (users and subscriptions)
** DONE Admin#index two queries for users and subscriptions
** DONE Add select box in Admin#index (users and subscriptions) - responsive reasons
** KILL Soring in admin indexes: |> order_by([p], fragment("?::time", p.inserted_at))
** DONE unaccent in CSQ
** DONE Add "copy e-mail from subscription" link in form
** DONE Migrate time zone to user and modify Admin users and subscriptions controllers
** DONE Select2 for time zones
** DONE AdminDashboard at least counts LIVE
** DONE VALIDATE SUBSCRIPTION FIELDS PRESENCE IN REGISTRATION CONTROLLER
** DONE Fix preload subscription for registration edit
** DONE sessions in ~/code/pjeski/lib/pjeski_web/plugs/user_data.ex + PRELOAD
** DONE Write tests for registration process, updating user/subscription, restricted nested attributes
** DONE Pow Reset password
** DONE Test registration controller + Email sending
** DONE Test resetting password controller + Email sending
** DONE Test session controller
** DONE Pow Email Confirmation
** DONE Pow Email Confirmation fields in admin panel (TOKEN)
** DONE POW Invitation and display subscription's users in Settings page + TESTS
** DONE Field labels 'for' translated!
** DONE Allow User to change their subscription. Allow users to invite to their subscription + TESTS
*** DONE Migrations: available_subscriptions+has_many_through[users<->subscriptions]
*** DONE invitation: if user exists: add subscription to available_subscriptions, if not: don't forget to create available_subscriptions link
*** DONE users: + disconnect from subscription
*** DONE user settings: change subscription (if more than one link) - select box: "name (email)"
** KILL Counter cache for subscriptions.users_count
** KILL sign in: ensure current_subscription_id is in available_subscriptions, if not: overwrite current_subscription_id with last (sort by inserted_at) from available_subscriptions
** DONE Remove "email" from subscription
** DONE Allow users without subscription to log in and see that they do not have any subscription, maybe buy?
** DONE Allow users with expired subscription to log in
** DONE Enable administrators to edit users' available_subscriptions
** DONE Enable administrators to delete subscriptions and reset all their users' subscription_id and join tables
** HOLD :pow_session_metadata
  The assigned private `:pow_session_metadata` key in the conn can be populated
  with custom metadata. This data will be stored in the session metadata when
  the session is created, and fetched in subsequent requests.

  Here's an example of how one could add sign in timestamp, IP, and user agent
  information to the session metadata:

#+BEGIN_SRC elixir
      def append_to_session_metadata(conn) do
        client_ip  = to_string(:inet_parse.ntoa(conn.remote_ip))
        user_agent = get_req_header(conn, "user-agent")

        metadata =
          conn.private
          |> Map.get(:pow_session_metadata, [])
          |> Keyword.put_new(:first_seen_at, DateTime.utc_now())
          |> Keyword.put(:ip, client_ip)
          |> Keyword.put(:user_agent, user_agent)

        Plug.Conn.put_private(conn, :pow_session_metadata, metadata)
      end
#+END_SRC
** WAIT Optimizing IEx for Ecto (book)
** WAIT Users permissions, control panel to change them
** DONE Pow v1.0.19 signed tokens (maybe this will help:) https://hexdocs.pm/pow/README.html#authorization-plug
** DONE Pow updated, fix all
warning: PowResetPassword.Plug.assign_reset_password_user/2 is deprecated. No longer used
  lib/pjeski_web/controllers/reset_password_controller.ex:74: PjeskiWeb.ResetPasswordController.load_user_from_reset_token/2

warning: PowResetPassword.Plug.user_from_token/2 is deprecated. Use `load_user_by_token/2` instead
  lib/pjeski_web/controllers/reset_password_controller.ex:66: PjeskiWeb.ResetPasswordController.load_user_from_reset_token/2

warning: PowInvitation.Plug.assign_invited_user/2 is deprecated. No longer used
  lib/pjeski_web/controllers/invitation_controller.ex:85: PjeskiWeb.InvitationController.load_user_from_invitation_token/2

warning: PowInvitation.Plug.invited_user_from_token/2 is deprecated. Use `load_invited_user_by_token/2` instead
  lib/pjeski_web/controllers/invitation_controller.ex:78: PjeskiWeb.InvitationController.load_user_from_invitation_token/2

** DONE Unconfirmed invited user resend invitation email
** DONE When user's subscription_id is nil...
** DONE user_from_auth_token(token) -> research better method
** DONE Add logout PubSub callback
** STRT START WRITING TESTS in 3..2..1..
** STRT Rename 'subscription_id' to 'last_used_subscription_id' and keep real 'subscription_id' in the session
*** on changing subscription - update 'last_used_subscription_id' and store 'subscription_id' in the session
*** on sign in - pass last_used_subscription_id to session:subscription_id if in available_subscriptions
*** edge cases - when no available_subscriptions, when not present in available_subscriptions, etc.
*** pubsub - disconnecting from subscriptions, logout if last_used_subscription
** TODO Migrate database, write seeds with a proper structure
** TODO CRUD Dashboard->Tables + TESTS
** TODO Add "changed subscription" PubSub callback
** TODO Adapt layout to subscription's tables
** TODO Counter cache for subscription tables, records, files
** TODO UserRecords::IndexLive + TESTS
- UserRecords::SearchComponent + TESTS
- UserRecords::IndexComponent + TESTS
- UserRecords::DisplayComponent + TESTS
- UserRecords::EditComponent + TESTS
- UserRecords::NewComponent + TESTS
** TODO Temporary assigns
** TODO UserRecords::ShowLive + TESTS
** TODO write Select2 abstraction for Live components: https://www.poeticoding.com/phoenix-liveview-javascript-hooks-and-select2/
** WAIT Write high level logging/history mechanism + TEST
** TODO Write restrictions for subscriptions, sending email (registration, forget, confirmation, invite) + TESTS
** WAIT use jaro_distance to colorize fields
** TODO "Notes" markdown everywhere
** TODO Ensure displayed "DB-inconsistency" errors
** TODO Add "failed login attempts" to user: https://elixirforum.com/t/how-to-increment-database-table-column/15457/2
** TODO Upload files, sharing (both just file and entire record) + TESTS
** TODO Fix that annoying EtsCacheMock in tests
** TODO Add "Enterprise" to the database
** TODO Deploy using Ansible: https://www.cogini.com/blog/deploying-elixir-apps-with-ansible/
** TODO Use Docker: https://docs.ansible.com/ansible/latest/scenario_guides/guide_docker.html
