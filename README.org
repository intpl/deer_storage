APP_HOST=localhost APP_PORT=80 SECRET_KEY_BASE=(mix phx.gen.secret) docker-compose up

# register at http://localhost/ and run:
docker exec -it pjeski_phoenix_1 /bin/bash
psql -d pjeski -c "UPDATE users SET email_confirmation_token = '', role = 'admin' WHERE id = 1;"

* Launch observer GUI
#+BEGIN_SRC elixir
:observer.start
#+END_SRC

* CHEATSHEET Elixir Ecto:
** Associations
*** Ecto.build_assoc - build association for parent
#+BEGIN_SRC elixir
artist = Repo.get_by(Artist, name: "Miles Davis")
album = Ecto.build_assoc(artist, :albums, title: "Miles Ahead")
Repo.insert(album)
#+END_SRC

*** Ecto.Changeset.put_assoc - appends entire collection to a parent record
#+BEGIN_SRC elixir
%Artist{name: "Eliane Elias"}
|> change
|> put_assoc(:albums, [%Album{title: "Made In Brazil"}])
|> Repo.insert
#+END_SRC

*** Ecto.Changeset.cast_assoc - adds entire collection as "nested attrs"
#+BEGIN_SRC elixir
params = %{"name" => "Esperanza Spalding", "albums" => [%{"title" => "Junjo"}]}
%Artist{}
|> cast(params, [:name])
|> cast_assoc(:albums, with: &SomeModule.some_function/2)
#+END_SRC

cast_assoc can insert and/or update records in db:

#+BEGIN_SRC elixir
portrait = Repo.get_by(Album, title: "Portrait In Jazz")
kind_of_blue = Repo.get_by(Album, title: "Kind Of Blue")
params = %{"albums" =>
[
%{"title" => "Explorations"},
%{"title" => "Portrait In Jazz (remastered)", "id" => portrait.id},
%{"title" => "Kind Of Blue", "id" => kind_of_blue.id}
]
}
artist = Repo.get_by(Artist, name: "Bill Evans")
|> Repo.preload(:albums)
{:ok, artist} =
artist
|> cast(params, [])
|> cast_assoc(:albums)
|> Repo.update
#+END_SRC

** Transactions and Multi
*** Repo.transaction
**** normal
#+BEGIN_SRC elixir
artist = %Artist{name: "Ben Webster"}
Repo.transaction(fn ->
  Repo.insert!(artist)
  Repo.insert!(nil) # <-- this will fail
end)

Repo.get_by(Artist, name: "Ben Webster") # => nil
#+END_SRC

**** with explicit rollback
#+BEGIN_SRC elixir
cs = Ecto.Changeset.change(%Artist{name: nil}) |> Ecto.Changeset.validate_required([:name])
Repo.transaction(fn ->
case Repo.insert(cs) do
{:ok, _artist} -> IO.puts("Artist insert succeeded")
{:error, _value} -> Repo.rollback("Artist insert failed")
end
case Repo.insert(Log.changeset_for_insert(cs)) do
{:ok, _log} -> IO.puts("Log insert succeeded")
{:error, _value} -> Repo.rollback("Log insert failed")
end
end)
# => {:error, "Artist insert failed"}
#+END_SRC


*** Ecto.Multi
#+BEGIN_SRC elixir
alias Ecto.Multi
artist = %Artist{name: "Johnny Hodges"}
multi = Multi.new
        |> Multi.insert(:artist, artist)
        |> Multi.insert(:log, Log.changeset_for_insert(artist))

Repo.transaction(multi)
#+END_SRC

#+BEGIN_SRC elixir
multi = Multi.new()
        |> Multi.insert(:artist, artist)
        |> Multi.insert(:log, Log.changeset_for_insert(artist))
        |> Multi.run(:search, SearchEngine, :update, ["extra argument"])

Repo.transaction(multi)
#+END_SRC

*** Migrations
Call flush() when using previously defined tables in migrations.


* Important things to remember
** Atoms are not garbage collected, how to check them
#+BEGIN_SRC
iex(1)> :erlang.system_info(:atom_limit)
1048576
iex(2)> :erlang.system_info(:atom_count)
22931
#+END_SRC

* Cool libraries to use
authentication and user management: https://github.com/danschultzer/pow
authorization: https://github.com/jarednorman/canada
CRON-like lib to log out users that did not pay: https://github.com/jbernardo95/cronex
time zones and dates: https://github.com/lau/calendar

* Translate using Gettext everywhere
After new additions:
#+BEGIN_SRC
mix gettext.extract --merge
#+END_SRC
edit LC_MESSAGES files

* Phoenix
** Usage

To start your Phoenix server:

*** Install dependencies with `mix deps.get`
*** Create and migrate your database with `mix ecto.setup`
*** Install Node.js dependencies with `cd assets && npm install`
*** Start Phoenix endpoint with `mix phx.server`

Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.

Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).

** Learn more

*** Official website: http://www.phoenixframework.org/
*** Guides: https://hexdocs.pm/phoenix/overview.html
*** Docs: https://hexdocs.pm/phoenix
*** Mailing list: http://groups.google.com/group/phoenix-talk
*** Source: https://github.com/phoenixframework/phoenix
